// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Application.Models.Organization = (function(_super) {
    __extends(Organization, _super);

    function Organization() {
      _ref = Organization.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Organization.prototype.url = function() {
      return "https://api.github.com/orgs/" + this.id + "?client_id={{site.client_id}}&client_secret={{site.client_secret}}";
    };

    Organization.prototype.initialize = function() {
      this.view = new Application.Views.Organization({
        model: this
      });
      return this.on("change:public_repos", this.collection.renderMeta);
    };

    return Organization;

  })(Backbone.Model);

  Application.Collections.Organizations = (function(_super) {
    __extends(Organizations, _super);

    function Organizations() {
      this.renderMeta = __bind(this.renderMeta, this);      _ref1 = Organizations.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Organizations.prototype.model = Application.Models.Organization;

    Organizations.prototype.initialize = function(models, options) {
      this.view = new Application.Views.Organizations({
        id: options.type
      }).render();
      return this.on("add", function(model) {
        this.view.$('.organizations').append(model.view.el);
        return model.fetch();
      });
    };

    Organizations.prototype["import"] = function(orgs) {
      var id, _i, _len;

      for (_i = 0, _len = orgs.length; _i < _len; _i++) {
        id = orgs[_i];
        this.add({
          id: id
        });
      }
      return this;
    };

    Organizations.prototype.public_repos = function() {
      return _.reduce(this.pluck("public_repos"), function(memo, num) {
        if (num == null) {
          return 0;
        }
        return memo + num;
      }, 0);
    };

    Organizations.prototype.renderMeta = function() {
      this.view.$('.meta .count').html(this.length);
      return this.view.$('.meta .public_repos').html(this.public_repos());
    };

    return Organizations;

  })(Backbone.Collection);

  Application.Views.Community = (function(_super) {
    __extends(Community, _super);

    function Community() {
      _ref2 = Community.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Community.prototype.el = ".community";

    Community.prototype.render = function() {
      var _this = this;

      $.getJSON("{{ site.root }}organizations.json", function(data) {
        var orgs, type, _results;

        _this.$el.html('');
        _results = [];
        for (type in data) {
          orgs = data[type];
          _results.push(Application.data[type] = new Application.Collections.Organizations(false, {
            type: type
          })["import"](orgs));
        }
        return _results;
      });
      return this;
    };

    return Community;

  })(Backbone.View);

  Application.Views.Organization = (function(_super) {
    __extends(Organization, _super);

    function Organization() {
      this.render = __bind(this.render, this);      _ref3 = Organization.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Organization.prototype.tagName = "li";

    Organization.prototype.className = "organization";

    Organization.prototype.attributes = function() {
      return {
        id: this.model.get('id')
      };
    };

    Organization.prototype.initialize = function() {
      return this.model.on("change", this.render);
    };

    Organization.prototype.render = function(foo) {
      var compiled;

      compiled = _.template($("#organization").html());
      this.$el.html(compiled(this.model.toJSON()));
      return this;
    };

    return Organization;

  })(Backbone.View);

  Application.Views.Organizations = (function(_super) {
    __extends(Organizations, _super);

    function Organizations() {
      this.render = __bind(this.render, this);      _ref4 = Organizations.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Organizations.prototype.className = "type";

    Organizations.prototype.attributes = function() {
      return {
        id: this.id
      };
    };

    Organizations.prototype.humanize = function() {
      return this.id.replace(/_/g, ' ').replace(/(\w+)/g, function(match) {
        return match.charAt(0).toUpperCase() + match.slice(1);
      });
    };

    Organizations.prototype.render = function() {
      var compiled;

      compiled = _.template($("#organizations").html());
      this.$el.html(compiled({
        id: this.id,
        name: this.humanize()
      }));
      return this;
    };

    Organizations.prototype.initialize = function() {
      return $('.community').append(this.$el);
    };

    return Organizations;

  })(Backbone.View);

  jQuery(document).ready(function($) {
    Application.instance = new Application.Views.Community();
    return Application.instance.render();
  });

}).call(this);
